{
  "version": 3,
  "sources": ["../../wretch/src/constants.ts", "../../wretch/src/utils.ts", "../../wretch/src/config.ts", "../../wretch/src/middleware.ts", "../../wretch/src/resolver.ts", "../../wretch/src/core.ts", "../../wretch/src/index.ts"],
  "sourcesContent": ["export const JSON_MIME = \"application/json\"\nexport const CONTENT_TYPE_HEADER = \"Content-Type\"\nexport const FETCH_ERROR = Symbol()", "import { CONTENT_TYPE_HEADER } from \"./constants.js\"\n\nexport function extractContentType(headers: HeadersInit = {}): string | undefined {\n  return Object.entries(headers).find(([k]) =>\n    k.toLowerCase() === CONTENT_TYPE_HEADER.toLowerCase()\n  )?.[1]\n}\n\nexport function isLikelyJsonMime(value: string): boolean {\n  return /^application\\/.*json.*/.test(value)\n}\n\nexport const mix = function (one: object, two: object, mergeArrays: boolean = false) {\n  return Object.entries(two).reduce((acc, [key, newValue]) => {\n    const value = one[key]\n    if (Array.isArray(value) && Array.isArray(newValue)) {\n      acc[key] = mergeArrays ? [...value, ...newValue] : newValue\n    } else if (typeof value === \"object\" && typeof newValue === \"object\") {\n      acc[key] = mix(value, newValue, mergeArrays)\n    } else {\n      acc[key] = newValue\n    }\n\n    return acc\n  }, { ...one })\n}\n", "import { mix } from \"./utils.js\"\nimport type { Config } from \"./types.js\"\n\ndeclare const global\n\nconst config: Config = {\n  // Default options\n  options: {},\n  // Error type\n  errorType: \"text\",\n  // Polyfills\n  polyfills: {\n    // fetch: null,\n    // FormData: null,\n    // URLSearchParams: null,\n    // performance: null,\n    // PerformanceObserver: null,\n    // AbortController: null\n  },\n  polyfill(p: string, doThrow: boolean = true, instance: boolean = false, ...args: any[]) {\n    const res = this.polyfills[p] ||\n      (typeof self !== \"undefined\" ? self[p] : null) ||\n      (typeof global !== \"undefined\" ? global[p] : null)\n    if (doThrow && !res) throw new Error(p + \" is not defined\")\n    return instance && res ? new res(...args) : res\n  }\n}\n\n/**\n * Sets the default fetch options that will be stored internally when instantiating wretch objects.\n *\n * ```js\n * import wretch from \"wretch\"\n *\n * wretch.options({ headers: { \"Accept\": \"application/json\" } });\n *\n * // The fetch request is sent with both headers.\n * wretch(\"...\", { headers: { \"X-Custom\": \"Header\" } }).get().res();\n * ```\n *\n * @param options Default options\n * @param replace If true, completely replaces the existing options instead of mixing in\n */\nexport function setOptions(options: object, replace = false) {\n  config.options = replace ? options : mix(config.options, options)\n}\n\n/**\n * Sets the default polyfills that will be stored internally when instantiating wretch objects.\n * Useful for browserless environments like `node.js`.\n *\n * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n *\n * ```js\n * import wretch from \"wretch\"\n *\n * wretch.polyfills({\n *   fetch: require(\"node-fetch\"),\n *   FormData: require(\"form-data\"),\n *   URLSearchParams: require(\"url\").URLSearchParams,\n * });\n *\n * // Uses the above polyfills.\n * wretch(\"...\").get().res();\n * ```\n *\n * @param polyfills An object containing the polyfills\n * @param replace If true, replaces the current polyfills instead of mixing in\n */\nexport function setPolyfills(polyfills: object, replace = false) {\n  config.polyfills = replace ? polyfills : mix(config.polyfills, polyfills)\n}\n\n/**\n * Sets the default method (text, json, â€¦) used to parse the data contained in the response body in case of an HTTP error.\n * As with other static methods, it will affect wretch instances created after calling this function.\n *\n * _Note: if the response Content-Type header is set to \"application/json\", the body will be parsed as json regardless of the errorType._\n *\n * ```js\n * import wretch from \"wretch\"\n *\n * wretch.errorType(\"json\")\n *\n * wretch(\"http://server/which/returns/an/error/with/a/json/body\")\n *   .get()\n *   .res()\n *   .catch(error => {\n *     // error[errorType] (here, json) contains the parsed body\n *     console.log(error.json)\n *   })\n * ```\n *\n * If null, defaults to \"text\".\n */\nexport function setErrorType(errorType: string) {\n  config.errorType = errorType\n}\n\nexport default config\n", "import type { ConfiguredMiddleware, FetchLike } from \"./types.js\"\n\n/**\n * @private @internal\n */\nexport const middlewareHelper = (middlewares: ConfiguredMiddleware[]) => (fetchFunction: FetchLike): FetchLike => {\n  return middlewares.reduceRight((acc, curr) => curr(acc), fetchFunction) || fetchFunction\n}\n", "import { middlewareHelper } from \"./middleware.js\"\nimport { mix } from \"./utils.js\"\nimport type { Wretch, WretchResponse, WretchResponseChain, WretchError as WretchErrorType } from \"./types.js\"\nimport { FETCH_ERROR } from \"./constants.js\"\n\n/**\n * This class inheriting from Error is thrown when the fetch response is not \"ok\".\n * It extends Error and adds status, text and body fields.\n */\nexport class WretchError extends Error implements WretchErrorType {\n  status: number\n  response: WretchResponse\n  url: string\n  text?: string\n  json?: any\n}\n\nexport const resolver = <T, Chain, R>(wretch: T & Wretch<T, Chain, R>) => {\n  const sharedState = Object.create(null)\n\n  wretch = wretch._addons.reduce((w, addon) =>\n    addon.beforeRequest &&\n    addon.beforeRequest(w, wretch._options, sharedState)\n    || w,\n    wretch)\n\n  const {\n    _url: url,\n    _options: opts,\n    _config: config,\n    _catchers: _catchers,\n    _resolvers: resolvers,\n    _middlewares: middlewares,\n    _addons: addons\n  } = wretch\n\n  const catchers = new Map(_catchers)\n  const finalOptions = mix(config.options, opts)\n\n  // The generated fetch request\n  let finalUrl = url\n  const _fetchReq = middlewareHelper(middlewares)((url, options) => {\n    finalUrl = url\n    return config.polyfill(\"fetch\")(url, options)\n  })(url, finalOptions)\n  // Throws on an http error\n  const referenceError = new Error()\n  const throwingPromise: Promise<void | WretchResponse> = _fetchReq\n    .catch(error => {\n      throw { __wrap: error }\n    })\n    .then(response => {\n      if (!response.ok) {\n        const err = new WretchError()\n        // Enhance the error object\n        err[\"cause\"] = referenceError\n        err.stack = err.stack + \"\\nCAUSE: \" + referenceError.stack\n        err.response = response\n        err.url = finalUrl\n        if (response.type === \"opaque\") {\n          throw err\n        }\n        return response.text().then((body: string) => {\n          err.message = body\n          if (config.errorType === \"json\" || response.headers.get(\"Content-Type\")?.split(\";\")[0] === \"application/json\") {\n            try { err.json = JSON.parse(body) } catch (e) { /* ignore */ }\n          }\n          err.text = body\n          err[\"status\"] = response.status\n          throw err\n        })\n      }\n      return response\n    })\n  // Wraps the Promise in order to dispatch the error to a matching catcher\n  const catchersWrapper = <T>(promise: Promise<T>): Promise<void | T> => {\n    return promise.catch(err => {\n      const error = err.__wrap || err\n\n      const catcher =\n        (error.status && catchers.get(error.status)) ||\n        catchers.get(error.name) || (\n          err.__wrap && catchers.has(FETCH_ERROR) && catchers.get(FETCH_ERROR)\n        )\n\n      if (catcher)\n        return catcher(error, wretch)\n\n      throw error\n    })\n  }\n  // Enforces the proper promise type when a body parsing method is called.\n  type BodyParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Awaited<Result>>\n  const bodyParser: BodyParser = funName => cb => funName ?\n    // If a callback is provided, then callback with the body result otherwise return the parsed body itself.\n    catchersWrapper(throwingPromise.then(_ => _ && _[funName]()).then(_ => cb ? cb(_) : _)) :\n    // No body parsing method - return the response\n    catchersWrapper(throwingPromise.then(_ => cb ? cb(_ as any) : _))\n\n  const responseChain: WretchResponseChain<T, Chain, R> = {\n    _wretchReq: wretch,\n    _fetchReq,\n    _sharedState: sharedState,\n    res: bodyParser<WretchResponse>(null),\n    json: bodyParser<any>(\"json\"),\n    blob: bodyParser<Blob>(\"blob\"),\n    formData: bodyParser<FormData>(\"formData\"),\n    arrayBuffer: bodyParser<ArrayBuffer>(\"arrayBuffer\"),\n    text: bodyParser<string>(\"text\"),\n    error(errorId, cb) {\n      catchers.set(errorId, cb)\n      return this\n    },\n    badRequest(cb) { return this.error(400, cb) },\n    unauthorized(cb) { return this.error(401, cb) },\n    forbidden(cb) { return this.error(403, cb) },\n    notFound(cb) { return this.error(404, cb) },\n    timeout(cb) { return this.error(408, cb) },\n    internalError(cb) { return this.error(500, cb) },\n    fetchError(cb) { return this.error(FETCH_ERROR, cb) },\n  }\n\n  const enhancedResponseChain: R extends undefined ? Chain & WretchResponseChain<T, Chain, undefined> : R = addons.reduce((chain, addon) => ({\n    ...chain,\n    ...(addon.resolver as any)\n  }), responseChain)\n\n  return resolvers.reduce((chain, r) => r(chain, wretch), enhancedResponseChain)\n}\n", "import { mix, extractContentType, isLikelyJsonMime } from \"./utils.js\"\nimport { JSON_MIME, CONTENT_TYPE_HEADER } from \"./constants.js\"\nimport { resolver } from \"./resolver.js\"\nimport config from \"./config.js\"\nimport type { Wretch } from \"./types.js\"\n\nexport const core: Wretch = {\n  _url: \"\",\n  _options: {},\n  _config: config,\n  _catchers: new Map(),\n  _resolvers: [],\n  _deferred: [],\n  _middlewares: [],\n  _addons: [],\n  addon(addon) {\n    return { ...this, _addons: [...this._addons, addon], ...addon.wretch }\n  },\n  errorType(errorType: string) {\n    return {\n      ...this,\n      _config: {\n        ...this._config,\n        errorType\n      }\n    }\n  },\n  polyfills(polyfills, replace = false) {\n    return {\n      ...this,\n      _config: {\n        ...this._config,\n        polyfills: replace ? polyfills : mix(this._config.polyfills, polyfills)\n      }\n    }\n  },\n  url(_url, replace = false) {\n    if (replace)\n      return { ...this, _url }\n    const split = this._url.split(\"?\")\n    return {\n      ...this,\n      _url: split.length > 1 ?\n        split[0] + _url + \"?\" + split[1] :\n        this._url + _url\n    }\n  },\n  options(options, replace = false) {\n    return { ...this, _options: replace ? options : mix(this._options, options) }\n  },\n  headers(headerValues) {\n    return { ...this, _options: mix(this._options, { headers: headerValues || {} }) }\n  },\n  accept(headerValue) {\n    return this.headers({ Accept: headerValue })\n  },\n  content(headerValue) {\n    return this.headers({ [CONTENT_TYPE_HEADER]: headerValue })\n  },\n  auth(headerValue) {\n    return this.headers({ Authorization: headerValue })\n  },\n  catcher(errorId, catcher) {\n    const newMap = new Map(this._catchers)\n    newMap.set(errorId, catcher)\n    return { ...this, _catchers: newMap }\n  },\n  resolve<R = unknown>(resolver, clear: boolean = false) {\n    return { ...this, _resolvers: clear ? [resolver] : [...this._resolvers, resolver] }\n  },\n  defer(callback, clear: boolean = false) {\n    return {\n      ...this,\n      _deferred: clear ? [callback] : [...this._deferred, callback]\n    }\n  },\n  middlewares(middlewares, clear = false) {\n    return {\n      ...this,\n      _middlewares: clear ? middlewares : [...this._middlewares, ...middlewares]\n    }\n  },\n  fetch(method: string = this._options.method, url = \"\", body = null) {\n    let base = this.url(url).options({ method })\n    // \"Jsonify\" the body if it is an object and if it is likely that the content type targets json.\n    const contentType = extractContentType(base._options.headers)\n    const jsonify = typeof body === \"object\" && (!base._options.headers || !contentType || isLikelyJsonMime(contentType))\n    base =\n      !body ? base :\n        jsonify ? base.json(body, contentType) :\n          base.body(body)\n    return resolver(\n      base\n        ._deferred\n        .reduce((acc: Wretch, curr) => curr(acc, acc._url, acc._options), base)\n    )\n  },\n  get(url = \"\") {\n    return this.fetch(\"GET\", url)\n  },\n  delete(url = \"\") {\n    return this.fetch(\"DELETE\", url)\n  },\n  put(body, url = \"\") {\n    return this.fetch(\"PUT\", url, body)\n  },\n  post(body, url = \"\") {\n    return this.fetch(\"POST\", url, body)\n  },\n  patch(body, url = \"\") {\n    return this.fetch(\"PATCH\", url, body)\n  },\n  head(url = \"\") {\n    return this.fetch(\"HEAD\", url)\n  },\n  opts(url = \"\") {\n    return this.fetch(\"OPTIONS\", url)\n  },\n  body(contents) {\n    return { ...this, _options: { ...this._options, body: contents } }\n  },\n  json(jsObject, contentType) {\n    const currentContentType = extractContentType(this._options.headers)\n    return this.content(\n      contentType ||\n      isLikelyJsonMime(currentContentType) && currentContentType ||\n      JSON_MIME\n    ).body(JSON.stringify(jsObject))\n  }\n}\n", "import { setOptions, setErrorType, setPolyfills } from \"./config.js\"\nimport { core } from \"./core.js\"\nimport { WretchError } from \"./resolver.js\"\nimport type { Wretch } from \"./types.js\"\n\nexport type {\n  Wretch,\n  Config,\n  ConfiguredMiddleware,\n  FetchLike,\n  Middleware,\n  WretchResponseChain,\n  WretchOptions,\n  WretchError,\n  WretchErrorCallback,\n  WretchResponse,\n  WretchDeferredCallback,\n  WretchAddon\n} from \"./types.js\"\n\n/**\n * Creates a new wretch instance with a base url and base\n * [fetch options](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch).\n *\n * ```ts\n * import wretch from \"wretch\"\n *\n * // Reusable instance\n * const w = wretch(\"https://domain.com\", { mode: \"cors\" })\n * ```\n *\n * @param _url The base url\n * @param _options The base fetch options\n * @returns A fresh wretch instance\n */\nfunction factory(_url = \"\", _options = {}): Wretch {\n  return { ...core, _url, _options }\n}\n\nfactory[\"default\"] = factory\n/** {@inheritDoc setOptions} */\nfactory.options = setOptions\n/** {@inheritDoc setErrorType} */\nfactory.errorType = setErrorType\n/** {@inheritDoc setPolyfills} */\nfactory.polyfills = setPolyfills\nfactory.WretchError = WretchError\n\nexport default factory\n"],
  "mappings": "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",
  "names": ["config", "url", "resolver"]
}
